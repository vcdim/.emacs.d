#+TITLE: Emacs Config
#+PROPERTY: header-args:elisp :tangle ./init.el

* Init File Management
#+begin_src elisp
(defun my/org-babel-tangle-config()
  (when (string-equal (buffer-file-name) (expand-file-name "config.org" user-emacs-directory))
    (let ((org-confirm-babel-evaluate nil)) (org-babel-tangle))))
(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook 'my/org-babel-tangle-config)))
#+end_src

* Packages
#+begin_src elisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; avoid checking signature to avoid error. not a great practise.
(setq package-check-signature nil)

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* Basic Settings
#+begin_src elisp
;; keep the .emacs.d folder clean
(setq no-littering-etc-directory (expand-file-name "~/.config/emacs/etc/"))
(setq no-littering-var-directory (expand-file-name "~/.config/emacs/var/"))

;; we need to have the variable BEFORE the setting!
(use-package no-littering)

;; enable smooth scrolling experience
(pixel-scroll-precision-mode)

;; default behavior of <home>/<end> is the head/end of document
(global-set-key (kbd "<home>") 'beginning-of-line)
(global-set-key (kbd "<end>") 'end-of-line)

;; this is mostly for Windows
(global-unset-key (kbd "C-z"))

;; delete directly
(setq delete-by-moving-to-trash t)

;; use y and n, instead of yes and no
(setopt use-short-answers t)

;; change the tab behavior
(setq tab-always-indent 'complete)

;; move the auto generated custom code to a file
(setq custom-file (concat no-littering-var-directory "custom-vars.el"))
(load custom-file 'noerror 'nomessge)

;; auto-revert
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)

;; save-place
(save-place-mode 1)
(setq save-place-forget-unreadable-files nil)

;; move backup file (afile~) autosave file (#afile#) to tmp
(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

;; enable truncate lines and visual-line-mode (word-wrap) by default
(set-default 'truncate-lines t)
(global-set-key (kbd "C-z") 'toggle-truncate-lines)
(global-visual-line-mode t)

(setq column-number-mode t)
#+end_src

* Org Basic
#+begin_src elisp
;; I like to use shift to select
(setq org-support-shift-select t)

;; This will fix the annoying auto formatting in the elisp code of org src
(setq org-src-preserve-indentation t)

;; Add shortcut to org mode, e.g.
;; <el<TAB> will insert a elisp code block
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("el" . "src elisp"))
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))

(setq org-hide-leading-stars t)
(setq org-hide-emphasis-markers t)

;; org-refile
(setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
(setq org-refile-use-outline-path 'file) 
(setq org-outline-path-complete-in-steps nil)
(setq org-tags-column -100)
#+end_src

* Chinese Fonts
|-------------------------------------------------------|
| 中文、——，。～‘’“”？·【】「」…… 《》！¥（）       |
| abcdedfghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ |
|-------------------------------------------------------|
#+begin_src elisp
(defun my/set-font ()
  (let ((default-font (font-spec :name "Iosevka" :size 15))
	(cn-font (font-spec :name "Sarasa Mono SC")))
    (set-face-attribute 'default nil :font default-font)
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font t charset cn-font))))
(defun my/frame-behaviors (&optional frame)
  (with-selected-frame (or frame (selected-frame)) (my/set-font)))
;; for server
(add-hook 'server-after-make-frame-hook 'my/frame-behaviors)
;; for normal start
(my/frame-behaviors)
#+end_src

* =magit=
#+begin_src elisp
(use-package magit)
#+end_src

* =markdown-mode=
#+begin_src elisp
(use-package markdown-mode)
#+end_src

* =vertico=
#+begin_src elisp
(use-package vertico)
(vertico-mode)

(use-package vertico-directory
  :after vertico
  :ensure nil
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

* =corfu=
#+begin_src elisp
(use-package corfu)
(global-corfu-mode)
#+end_src

* =orderless=
#+begin_src elisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

* =marginalia=
#+begin_src elisp
(use-package marginalia)
(marginalia-mode)
#+end_src

* =all-the-icons-completion=
#+begin_src elisp
(use-package all-the-icons-completion)
(all-the-icons-completion-mode)
(add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup)
#+end_src

* Path, =vterm=, and =multi-vterm=
#+begin_src elisp
(use-package exec-path-from-shell)
(exec-path-from-shell-initialize)

(use-package vterm
  :init
  (setq vterm-always-compile-module t))

(use-package multi-vterm)
#+end_src

* =ibuffer=, =diredfl=
#+begin_src elisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(setq ibuffer-expert t)

(use-package diredfl)
(setq diredfl-global-mode t)
#+end_src

* =treemacs=
#+begin_src elisp
(use-package treemacs)
(global-set-key (kbd "C-x t t") 'treemacs)
#+end_src

* =org-roam=
#+begin_src elisp
(use-package org-roam
  :bind
  (("C-c n l" . org-roam-buffer-toggle)
   ("C-c n f" . org-roam-node-find)
   ("C-c n i" . org-roam-node-insert)
   ("C-c n c" . org-roam-capture)
   ("C-c n j" . org-roam-dailies-capture-today)
   ("C-c n d" . org-roam-dailies-goto-today)
   )
  )
(setq org-roam-directory "~/Niuwa/03_Qun/roam/")

;; relative path to org-roam-directory
(setq org-roam-dailies-directory "daily/")

(setq org-roam-dailies-capture-templates
      '(("d" "default" entry "* %?"
	 :target (file+datetree "journal.org" day))))

;; global org-capture
(defun my/org-capture ()
  (interactive)
  (delete-other-windows)
  (cl-letf (((symbol-function 'switch-to-buffer-other-window) #'switch-to-buffer))
    (condition-case err (org-roam-dailies-capture-today)
      (error (when (equal err '(error "Abort")) (delete-frame))))))
(defadvice org-capture-finalize (after delete-capture-frame activate)
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))
#+end_src

* =citar=
#+begin_src elisp
(use-package citar
  :custom
  (citar-bibliography '("~/Niuwa/03_Qun/common/gq.bib"))
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  ;; open pdf by default viewer
  (add-to-list 'citar-file-open-functions '("pdf" . citar-file-open-external))
  :hook
  (LaTeX-mode . citar-capf-setup)
  (org-mode . citar-capf-setup)
  (markdown-mode . citar-capf-setup))

;; better looking
(defvar citar-indicator-files-icons (citar-indicator-create
   :symbol (all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1)
   :function #'citar-has-files :padding "  " :tag "has:files"))
(defvar citar-indicator-links-icons (citar-indicator-create
   :symbol (all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01)
   :function #'citar-has-links :padding "  " :tag "has:links"))
(defvar citar-indicator-notes-icons (citar-indicator-create
   :symbol (all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3)
   :function #'citar-has-notes :padding "  " :tag "has:notes"))
(defvar citar-indicator-cited-icons (citar-indicator-create
   :symbol (all-the-icons-faicon "circle-o" :face 'all-the-icon-green)
   :function #'citar-is-cited :padding "  " :tag "is:cited"))
(setq citar-indicators
      (list citar-indicator-files-icons citar-indicator-links-icons
            citar-indicator-notes-icons citar-indicator-cited-icons))
#+end_src

* =citar-org-roam=
#+begin_src elisp
(use-package citar-org-roam
  :after (citar org-roam)
  :config (citar-org-roam-mode))
(setq citar-org-roam-note-title-template "${title}\n#+author: ${author}\n")
#+end_src

* =smartparens=
#+begin_src elisp
(use-package smartparens-mode
  :ensure smartparens
  :hook (prog-mode markdown-mode)
  :config
  (require 'smartparens-config))

(bind-keys
 :map smartparens-mode-map
 ("C-M-a" . sp-beginning-of-sexp)
 ("C-M-e" . sp-end-of-sexp)
 ("C-<down>" . sp-down-sexp)
 ("C-<up>"   . sp-up-sexp)
 ("M-<down>" . sp-backward-down-sexp)
 ("M-<up>"   . sp-backward-up-sexp)
 ("C-M-f" . sp-forward-sexp)
 ("C-M-b" . sp-backward-sexp)
 ("C-M-n" . sp-next-sexp)
 ("C-M-p" . sp-previous-sexp)
 ("C-S-f" . sp-forward-symbol)
 ("C-S-b" . sp-backward-symbol)
 ("C-<right>" . sp-forward-slurp-sexp)
 ("C-<left>"  . sp-backward-slurp-sexp)
 ("M-<right>" . sp-forward-barf-sexp)
 ("M-<left>"  . sp-backward-barf-sexp)
 ("C-M-t" . sp-transpose-sexp)
 ("C-M-k" . sp-kill-sexp)
 ("C-k"   . sp-kill-hybrid-sexp)
 ("M-k"   . sp-backward-kill-sexp)
 ("C-M-w" . sp-copy-sexp)
 ("C-M-d" . delete-sexp)
 ("M-<backspace>" . backward-kill-word)
 ("C-<backspace>" . sp-backward-kill-word)
 ([remap sp-backward-kill-word] . backward-kill-word)
 ("M-[" . sp-backward-unwrap-sexp)
 ("M-]" . sp-unwrap-sexp)
 ("C-x C-t" . sp-transpose-hybrid-sexp)
 ("C-c ("  . sp-wrap-round)
 ("C-c ["  . sp-wrap-square)
 ("C-c {"  . sp-wrap-curly))
#+end_src

* =auctex= and =cdlatex=
#+begin_src elisp
(use-package tex
  :ensure auctex)
(setq-default TeX-master nil)
(setq TeX-parse-self t)
(setq TeX-engine 'xetex)
(setq TeX-command-extra-options "-shell-escape")
(setq TeX-electric-sub-and-superscript t)
(setq TeX-auto-save t)
(setq TeX-command-default "XeLaTeX")
(setq TeX-save-query nil)
(setq TeX-show-compilation nil)
(setq TeX-source-correlate-start-server t)
(add-to-list 'LaTeX-verbatim-environments "minted")
(add-to-list 'TeX-command-list
	     '("XeLaTeX" "%`xelatex%(mode)%' -shell-escape -synctex=1 %t" TeX-run-TeX nil t))
;; come back to tex file after compilation finishes
(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

(use-package cdlatex)
(add-hook 'LaTeX-mode-hook #'turn-on-cdlatex)
#+end_src

* =elfeed=
#+begin_src elisp
(use-package elfeed)
(setq elfeed-search-title-max-width 100)
(defun concatenate-authors (authors-list)
  (mapconcat (lambda (author) (plist-get author :name)) authors-list ", "))
(defun my-search-print-fn (entry)
  (let* ((date (elfeed-search-format-date (elfeed-entry-date entry)))
         (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
         (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
         (feed (elfeed-entry-feed entry))
         (feed-title (when feed (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
         (entry-authors (concatenate-authors (elfeed-meta entry :authors)))
         (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
         (tags-str (mapconcat (lambda (s) (propertize s 'face 'elfeed-search-tag-face)) tags ","))
         (title-width (- (window-width) 10 elfeed-search-trailing-width))
         (title-column (elfeed-format-column
                        title (elfeed-clamp elfeed-search-title-min-width
					    title-width elfeed-search-title-max-width)
                        :left))
         (entry-score (elfeed-format-column
                       (number-to-string
                        (elfeed-score-scoring-get-score-from-entry entry))
                       10 :left))
         (authors-width 50)
         (authors-column (elfeed-format-column
                          entry-authors
                          (elfeed-clamp elfeed-search-title-min-width authors-width 100)
					:left)))
	 (insert (propertize date 'face 'elfeed-search-date-face) " ")
	 (insert (propertize title-column 'face title-faces 'kbd-help title) " ")
	 (insert (propertize authors-column 'face 'elfeed-search-date-face 'kbd-help entry-authors) " ")
	 (insert entry-score " ")
	 (when entry-authors (insert (propertize feed-title 'face 'elfeed-search-feed-face) " "))
	 (when tags (insert "(" tags-str ")"))
    )
  )
(setq elfeed-search-print-entry-function #'my-search-print-fn)
(run-at-time nil (* 8 60 60) #'elfeed-update)
(use-package elfeed-org
  :config
  (setq rmh-elfeed-org-files (list (concat no-littering-var-directory "elfeed.org")))
  (elfeed-org)
  )
(use-package elfeed-score
  :after elfeed
  :config
  (elfeed-score-load-score-file (concat no-littering-var-directory "elfeed.score"))
  (elfeed-score-enable)
  (define-key elfeed-search-mode-map "=" elfeed-score-map))
#+end_src

* =which-key=
#+begin_src elisp
(use-package which-key)
(which-key-mode)
#+end_src
